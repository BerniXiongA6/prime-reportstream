title = "PRIME ReportStream Gitleaks Configuration"

# Global allowlist
[allowlist]
    description = "Allow-list for files and paths"
    files = [
        '(.*?)(bin|doc|gif|jar|jp(e)?g|pdf|png|xlsx)$',
        '^\.?gitleaks-config.toml$',
        '^\.?gitleaks.report.json$',
        '^package-lock\.json$',
        'cleanslate.sh.log',
        'yarn\.lock$',
    ]
    paths = [
        '.terraform/providers/',
        'frontend-react/build/',
        'frontend-react/node_modules/',
        'prime-router/.gradle/',
        'prime-router/build/',
        'prime-router/docs/dependency-graph-full/dependency-graph-full.txt',
        'prime-router/docs/schema_documentation/',
        'prime-router/src/test/csv_test_files/input/',
    ]


[[rules]]
    description = "Email"
    regex = '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}'
    tags = [
        "email"
    ]
    [rules.allowlist]
        # TODO: Filter the real ones down
        regexes = [
            '(?i)@cdc.local',
            '(?i)@email.com',
            '(?i)@organization.tld',
            '(?i)a@cdc.gov',
            '(?i)adhelpdsk@cdc.gov',
            '(?i)data@cdc.gov',
            '(?i)e.ripley@weylandyutani.com',
            '(?i)jbrush@avantecenters.com',
            '(?i)jj@phd.gov',
            '(?i)joe.jones@az.pima.gov',
            '(?i)local@test.com',
            '(?i)noreply@cdc.gov',
            '(?i)prime@cdc.gov',
            '(?i)qtv1@cdc.gov',
            '(?i)qva8@cdc.gov',
            '(?i)reportstream@cdc.gov',
            '(?i)support@simplereport.gov',
            '(?i)usds@cdc.gov',
            '(?i)usds@omb.eop.gov',
        ]

[[rules]]
    description = "Env Var"
    regex = '(?i)(apikey|secret|key|api|password|pass|pw|host)=[0-9a-zA-Z-_.{}]{4,120}'
    tags = [
        "envvar",
    ]
    [rules.allowlist]
        files = [
            '\.(js|ts(x)?)$',                   # No environment variable definitions in Javascript/TypeScript files
            'docker-compose(\.build)?\.yml',    # This is local anyway
        ]
        regexes = [
            '(?i)e\.g\. ',                                      # The value 'e.g.' means 'example'
            'pdhstaging-pgsql\.postgres\.database\.azure\.com', # Not a secret
            'DB_USER=prime',                                    # Not real
            'DB_PASSWORD=mypass(word)?',                           # Not real
        ]

[[rules]]
    description = "Generic Credential"
    regex = '''(?i)(dbpasswd|dbuser|dbname|dbhost|api_key|apikey|secret|key|api|password|user|guid|hostname|pw|auth)(.{0,20})?['|"]([0-9a-zA-Z-_\/+!{}/=]{4,120})['|"]'''
    tags = [
        "API",
        "generic",
        "key",
    ]
    [rules.allowlist]
        regexes = [
            ' by option\(\"',
            '''(?i)(.{0,20})?['"][0-9a-f]{32}-us[0-9]{1,2}['"]''',
            '(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}',
            '(patterns_to_match|key_permissions)\s*=',                                      # Terraform artifacts
            '(prime|changeIT!)',                                                            # Default cred, this is allowed (too broad??)
            '(resource|data) \"azurerm',                                                    # Terraform azure data or resource
            '\.containsKey\(',
            '\"user(\d)*\", \"pass(\d)*\"',                                                 # Not real creds
            '\"user\":\"user1\",(\s)*\"pass\":\"pass1\"',
            '\s*=\s*validateUser\s*\(',
            '\s+KEY_VAULT_NAME\s*=\s*\"',
            '^import (.)+ from (.)+;',                                                      # react import statement (simplified)
            'apiConfig\(',                                                                  # function call
            'apiVersion',
            'className=',                                                                   # this is HTML
            'const val (user|password)Variable = \"POSTGRES_(USER|PASSWORD)\"$',            # Literal value
            'export USERNAME=\"client\"',
            'it\.key\.contains\(',                                                          # iterator key access
            'MockResponse\(',                                                               # Explicitly listed as Mock
            'PrincipalLevel\.USER',
            'private const val apiPath = \"',
            'rsa_key_(2048|4096)\s*=\s*\"pdh(prod|test|staging)-((2048|4096)-)?key\"',      # Terraform artifacts
            'SECRET_STORAGE_METHOD(\")?\s=',                                                # Method, not a secret
            'secretClient\.getSecret\(\"',
            'SecretHelper\.getSecretService\(\)\.fetchSecret\(',                            # You are fetching the secret properly
            'secretService getProperty \"',
            'secretService\.fetchSecret\(',                                                 # You are fetching the secret properly
            'val KEY_DB_(USER|PASSWORD|URL) = (\"|\\\")DB_(USER|URL|PASSWORD)(\"|\\\")',    # contained verbatim 'DB_(USER|PASSWORD|URL)'
            'val KEY_PRIME_RS_API_ENDPOINT_HOST = ',                                        # Setting of the name of an environment variable name
            'xox[baprs]-([0-9a-zA-Z]{10,48})',
        ]
        paths = [
            '.terraform/modules/',
            'prime-router/settings/prod/',
        ]

[[rules]]
    description = "Github"
    regex = '''(?i)github(.{0,20})?(?-i)['\"][0-9a-zA-Z]{35,40}['\"]'''
    tags = [
        "key",
        "Github",
    ]

[[rules]]
    description = "High Entropy"
    regex = '[0-9a-zA-Z-_!{}/=]{4,120}'
    file = '''(?i)(dump.sql|high-entropy-misc.txt)$'''
    tags = [
        "entropy",
    ]
    [[rules.Entropies]]
        Min = "4.3"
        Max = "7.0"

[[rules]]
    description = "IPv4 addresses"
    regex = '\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.|$)){4}\b'
    tags = [
        "network",
        "IPv4",
    ]
    [rules.allowlist]
        files = [
            '\.ovpn$',
        ]
        paths = [
            'prime-router/settings/(staging|prod)/'
        ]
        regexes = [
            '\d+\.\d+\.\d+\.\d+\.',                     # Fix for bug in regex (allows trailing dots)
            '0\.0\.0\.0',
            '10\.(\d+\.){2}\d+',                        # Cheapo 10.0.0.0/8 range
            '127\.(\d+\.){2}\d+',                       # Cheapo 127.0.0.0/8 range
            'receivingApplicationOID',
            'receivingFacilityOID',
            'reportingFacilityId',
        ]

[[rules]]
    description = "IPv6 addresses"
    regex = '([a-f0-9:]+:+)+[a-f0-9]+'                  # Cheapo, better wanted
    tags = [
        "network",
        "IPv6",
    ]
    [rules.allowlist]
        files = [
            "docker-compose.yml",                       # Local anyway
        ]
        regexes = [
            '::1\/128',                                 # Local
            '(?i)::(cl|dat|cs|aft|befo|add-|fi|er)',    # Kotlin/css-ism
            '(?i)\d+:\d+(am|pm)',
            '(?i)certificate fingerprint \(',
            '(?i)FROM\s[a-z0-9]',
            '\d{10}',
            '\d+-\d+-\d+T(\d+:\d+-\d+:\d+|\d+:\d+(:\d+)?(Z)?)',              # Timestamp
            '\s+(testI|i)mplementation\(',              # Probably in gradle.build.kts
            '\s+assert[a-zA-Z]+\(',                     # might make them sneak into test cases??
            '^\s*(?i)example:',
            '^\s+-\s?[1-9][0-9]*(:[1-9][0-9]*)?',       # docker port mapping
            '0\.0\.0\.0:',                              # avoid 0.0.0.1:<port>
            '127\.0\.0\.1:',                            # avoid 127.0.0.1:<port>
            'a:act',
            'docker exec --user ',                      # probably a sample command; local anyway
            'expiresOn',
            'foo:pass:(\d+)?::upload',                  # Local creds
            'initialTime',
            'rsa',
            'me:fu',
        ]

[[rules]]
    description = "MailChimp"
    regex = '[0-9a-f]{32}-us[0-9]{12}'
    tags = [
        "key",
        "mailchimp"
    ]

[[rules]]
    description = "Port"
    regex = '(?i)port(.{0,4})?[0-9]{1,10}'
    tags = [
        "port"
    ]
    [rules.allowlist]
        files = [
        ]
        regex = '(?i)(=)([0-9a-zA-Z-_!{}=]{4,120})'
    [[rules.Entropies]]
        Min = "3.5"
        Max = "4.5"
        Group = "1"

[[rules]]
    description = "Private Keys"
    regex = '-----BEGIN ((EC|PGP|DSA|RSA|OPENSSH) )?PRIVATE KEY( BLOCK)?-----'
    tags = [
        "key",
        "AsymmetricPrivateKey",
    ]

[[rules]]
    description = "SendGrid API Key"
    regex = 'SG\.[\w_]{16,32}\.[\w_]{16,64}'
    tags = [
        "key",
        "sendgrid",
    ]

[[rules]]
    description = "Slack"
    regex = 'xox[baprs]-([0-9a-zA-Z]{10,48})?'
    tags = [
        "key",
        "Slack",
    ]

[[rules]]
    description = "Slack Webhook"
    regex = 'https://hooks.slack.com/services/T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8}/[a-zA-Z0-9_]{24}'
    tags = [
        "key",
        "slack",
    ]

[[rules]]
    description = "SonarQube Docs API Key"
    regex = '''(?i)sonar.{0,50}(\\\"|'|`)?[0-9a-f]{40}(\\\"|'|`)?'''
    tags = [
        "key",
        "sonarqube",
    ]

[[rules]]
    description = "Twilio API Key"
    regex = '''(?i)twilio(.{0,20})?['\"][0-9a-f]{32}['\"]'''
    tags = [
        "key",
        "twilio",
    ]