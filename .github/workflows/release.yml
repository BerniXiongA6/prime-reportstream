name: Release to Azure

on:
  push:
    branches: [ master, production ]

defaults:
  run:
    working-directory: prime-router

jobs:
  build_release:
    name: Build Release
    runs-on: ubuntu-latest
    env:
      # These are for CI and not credentials of any system
      POSTGRES_USER: prime
      POSTGRES_PASSWORD: changeIT!
    steps:
      - uses: actions/checkout@v2

      - name: Setup PostgreSQL
        uses: Harmon758/postgresql-action@0be19fa37850b22cb4c9bbf28a03abbf44abd863
        with:
          postgresql version: 11
          postgresql db: prime_data_hub
          postgresql user: ${{ env.POSTGRES_USER }}
          postgresql password: ${{ env.POSTGRES_PASSWORD }}

      - name: Setup JDK
        uses: actions/setup-java@v1.4.3
        with:
           java-version: 11

      - name: Cache Maven Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('prime-router/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Build Maven Package
        run: mvn -B clean package --file pom.xml -Dpg.user=$POSTGRES_USER -Dpg.password=$POSTGRES_PASSWORD

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: prime-router-build-${{ github.run_id }}
          path: prime-router/target
          retention-days: 7

  deploy_release_staging:
    name: "Deploy Release: STAGING"
    needs: build_release
    if: github.ref == 'refs/heads/master'
    environment: staging
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP: prime-data-hub-staging
      ACR_REPO: pdhstagingcontainerregistry.azurecr.io
      PREFIX: pdhstaging
    steps:
      - uses: actions/checkout@v2

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: prime-router-build-${{ github.run_id }}
          path: prime-router/target

      - name: Build Docker Image
        run: docker build . --file Dockerfile --tag ${{ env.ACR_REPO }}/${{ env.PREFIX }}:${{ github.run_id }}

      - name: Install OpenVPN
        run: |
          sudo apt-get install openvpn
          sudo apt install openvpn-systemd-resolved

      - name: Connect VPN
        uses: golfzaptw/action-connect-ovpn@master
        id: connect_vpn
        with:
          PING_URL: '127.0.0.1'
          FILE_OVPN: '.github/vpn/staging.ovpn'
          TLS_KEY: ${{ secrets.TLS_KEY }}
        env:
          CA_CRT: ${{ secrets.CA_CRT}}
          USER_CRT: ${{ secrets.USER_CRT }}
          USER_KEY: ${{ secrets.USER_KEY }}

      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.SERVICE_PRINCIPAL_CREDS }}

      - name: ACR Login
        run: az acr login --name ${{ env.ACR_REPO }}

      - name: Push Docker Image
        run: docker push ${{ env.ACR_REPO }}/${{ env.PREFIX }}:${{ github.run_id }}

      - name: Deploy Azure Function App
        uses: Azure/functions-container-action@v1
        id: deploy_azure
        with:
          app-name: ${{ env.PREFIX }}-functionapp
          image: ${{ env.ACR_REPO }}/${{ env.PREFIX }}:${{ github.run_id }}


  deploy_release_prod:
    name: "Deploy Release: PROD"
    needs: build_release
    if: github.ref == 'refs/heads/production'
    environment: prod
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP: prime-data-hub-prod
      ACR_REPO: pdhprodcontainerregistry.azurecr.io
      PREFIX: pdhprod
    steps:
      - uses: actions/checkout@v2

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: prime-router-build-${{ github.run_id }}
          path: prime-router/target

      - name: Build Docker Image
        run: docker build . --file Dockerfile --tag ${{ env.ACR_REPO }}/${{ env.PREFIX }}:${{ github.run_id }}

      - name: Install OpenVPN
        run: |
          sudo apt-get install openvpn
          sudo apt install openvpn-systemd-resolved

      - name: Connect VPN
        uses: golfzaptw/action-connect-ovpn@master
        id: connect_vpn
        with:
          PING_URL: '127.0.0.1'
          FILE_OVPN: '.github/vpn/prod.ovpn'
          TLS_KEY: ${{ secrets.TLS_KEY }}
        env:
          CA_CRT: ${{ secrets.CA_CRT}}
          USER_CRT: ${{ secrets.USER_CRT }}
          USER_KEY: ${{ secrets.USER_KEY }}

      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.SERVICE_PRINCIPAL_CREDS }}

      - name: ACR Login
        run: az acr login --name ${{ env.ACR_REPO }}

      - name: Push Docker Image
        run: docker push ${{ env.ACR_REPO }}/${{ env.PREFIX }}:${{ github.run_id }}

      - name: Deploy Azure Function App
        uses: Azure/functions-container-action@v1
        id: deploy_azure
        with:
          app-name: ${{ env.PREFIX }}-functionapp
          image: ${{ env.ACR_REPO }}/${{ env.PREFIX }}:${{ github.run_id }}