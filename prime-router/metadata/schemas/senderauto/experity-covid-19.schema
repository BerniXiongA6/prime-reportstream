# You can generate fake data using this schema with this command:  
# ./prime data --input-fake 100 --input-schema senderauto/experity-covid-19 --output ./fake-experity-data.csv
---
name: experity-covid-19
description: Experity EMR
topic: covid-19
# ??? what to use here?  Should be unique as possible.  Should be something the customer can use if they have questions on about data.
trackingElement: testing_lab_accession_number
basedOn: covid-19
elements:

  # Patient ID is generated internally by SimpleReport
  - name: patient_id
    csvFields: [{name: Patient_ID}]

  - name: patient_id_assigner
    csvFields: [{name: Patient_ID_assigner}]

  # Custom field
  - name: patient_id_2
    type: ID
    csvFields: [{name: Patient_ID_2}]

  # Skipped Patient_ID_2_assigner

  - name: patient_last_name
    csvFields: [{name: Patient_last_name}]

  #SKIPPED - NEED TO ADD THESE:	Patient_first_name Patient_middle_name Patient_suffix

  - name: patient_race
    csvFields: [{name: Patient_race, format: $display}]

  - name: patient_dob
    csvFields: [{name: Patient_DOB, format: MM/dd/yyyy}]

  #SKIPPED Patient_age, Patient_age_units (use 'yr' or 'mo')

  - name: patient_gender
    csvFields: [{name: Patient_gender}]

  # ??? Confirm "Hispanic" - not in the data.  Any other values?
  - name: patient_ethnicity
    csvFields: [{name: Patient_ethnicity, format: $display}]
    altValues:
      - code: 2186-5
        display: Not Hispanic or Latino
      - code: 2135-2
        display: Hispanic
      - code: UNK
        display: Patient Declines

  # Using first_test as an example of a way to handle a field with unusial values not easily put into a valueset - 
  # specifying the type overrides the type in covid-19.schema
  # Here, first_test has valueset hl70136 in the covid-19.schema.  If we are getting weird values,
  # one option is to override with type: TEXT.
  - name: first_test
    type: TEXT
    csvFields: [{name: First_test}]

  # Note: Send test_kit_name_id value as an exact string match to what's in the LIVD file.

  # We didn't have time to talk about how to do a child schema.  However, you can see an example of that with
  # direct/direct-covid-19 as the parent (equivalent to senderauto/experity-covid-19) and
  # direct/imagemover-covid-19 as the child (equivalent to, eg, senderauto/guc-covid-19)

  # These two fields are needed by the child schema:

  - name: sender_id
    cardinality: ONE
    csvFields: [{ name: senderId}]

  - name: processing_mode_code
    csvFields: [{name: processingModeCode}]


  # That's as far as we got.  Everything else below this is from the SimpleReport (aka PDI) schema







  - name: patient_first_name
    csvFields: [{name: Patient_first_name}]

  - name: patient_middle_name
    csvFields: [{name: Patient_middle_name}]

  - name: patient_suffix
    csvFields: [{name: Patient_suffix}]

  - name: patient_id_type
    default: PI

  - name: test_performed_code
    csvFields: [{name: Ordered_test_code}]

  - name: specimen_source_site_code
    csvFields: [{name: Specimen_source_site_code, format: $code}]

  - name: specimen_type
    csvFields: [{name: Specimen_type_code}]

  # The type of device used for the test.  eg, BinaxNOW COVID-19 Ag Card
  - name: equipment_model_name
    csvFields: [{name: Device_ID}]

  # Identifier for the specific piece of equipment used.
  - name: equipment_instance_id
    csvFields: [{name: Instrument_ID}]

  - name: message_id
    cardinality: ONE
    csvFields: [{name: Result_ID}]

  - name: previous_message_id
    csvFields: [{name: Corrected_result_ID}]

  - name: placer_order_id
    mapper: use(message_id)

  - name: filler_order_id
    mapper: use(message_id)

  # Optional until SimpleReport team provides this.
  - name: test_result_status
    default: F
    csvFields: [{name: Test_result_status}]

  - name: test_result
    csvFields: [{name: Test_result_code}]

  - name: illness_onset_date
    csvFields: [{name: Illness_onset_date}]

  - name: specimen_collection_date_time
    csvFields: [{name: Specimen_collection_date_time}]

  - name: order_test_date
    csvFields: [{name: Order_test_date}]

  - name: test_result_date
    csvFields: [{name: Test_date, format: yyyyMMdd}]

  - name: date_result_released
    csvFields: [{name: Date_result_released, format: yyyyMMdd}]

  - name: patient_street
    csvFields: [{name: Patient_street}]

  - name: patient_street2
    csvFields: [{name: Patient_street_2}]

  - name: patient_city
    csvFields: [{name: Patient_city}]

  - name: patient_state
    csvFields: [{name: Patient_state}]

  - name: patient_zip_code
    csvFields: [{name: Patient_zip_code}]

  - name: patient_phone_number
    csvFields: [{name: Patient_phone_number}]

  - name: patient_county
    csvFields: [{name: Patient_county}]

  - name: patient_email
    csvFields: [{name: Patient_email}]

    # Eg, Staff, Resident, Visitor, Student
  - name: patient_role
    csvFields: [{name: Patient_role}]
    type: TEXT

  - name: employed_in_healthcare
    csvFields: [{name: Employed_in_healthcare}]

  - name: resident_congregate_setting
    csvFields: [{name: Resident_congregate_setting}]

  - name: symptomatic_for_disease
    csvFields: [{name: Symptomatic_for_disease}]

  - name: testing_lab_name
    csvFields: [{name: Testing_lab_name}]

  - name: testing_lab_clia
    csvFields: [{name: Testing_lab_CLIA}]

  - name: testing_lab_street
    csvFields: [{name: Testing_lab_street}]

  - name: testing_lab_street2
    csvFields: [{name: Testing_lab_street_2}]

  - name: testing_lab_city
    csvFields: [{name: Testing_lab_city}]

  - name: testing_lab_state
    csvFields: [{name: Testing_lab_state}]

  - name: testing_lab_zip_code
    csvFields: [{name: Testing_lab_zip_code}]

  - name: testing_lab_phone_number
    csvFields: [{name: Testing_lab_phone_number}]

  - name: testing_lab_county
    csvFields: [{name: Testing_lab_county}]

  - name: organization_name
    documentation: For cases where organization owns many facilities (eg, a large hospital system)
    csvFields: [{name: Organization_name}]
    type: TEXT

  - name: ordering_facility_name
    csvFields: [{name: Ordering_facility_name}]

  - name: ordering_facility_street
    csvFields: [{name: Ordering_facility_street}]

  - name: ordering_facility_street2
    csvFields: [{name: Ordering_facility_street_2}]

  - name: ordering_facility_city
    csvFields: [{name: Ordering_facility_city}]

  - name: ordering_facility_state
    csvFields: [{name: Ordering_facility_state}]

  - name: ordering_facility_zip_code
    csvFields: [{name: Ordering_facility_zip_code}]

  - name: ordering_facility_phone_number
    csvFields: [{name: Ordering_facility_phone_number}]

  - name: ordering_facility_county
    csvFields: [{name: Ordering_facility_county}]

  - name: ordering_facility_email
    csvFields: [{name: Ordering_facility_email}]

  - name: ordering_provider_id
    csvFields: [{name: Ordering_provider_ID}]

  - name: ordering_provider_last_name
    csvFields: [{name: Ordering_provider_last_name}]

  - name: ordering_provider_first_name
    csvFields: [{name: Ordering_provider_first_name}]

  - name: ordering_provider_street
    csvFields: [{name: Ordering_provider_street}]

  - name: ordering_provider_street2
    csvFields: [{name: Ordering_provider_street_2}]

  - name: ordering_provider_city
    csvFields: [{name: Ordering_provider_city}]

  - name: ordering_provider_state
    csvFields: [{name: Ordering_provider_state}]

  - name: ordering_provider_zip_code
    csvFields: [{name: Ordering_provider_zip_code}]

  - name: ordering_provider_phone_number
    csvFields: [{name: Ordering_provider_phone_number}]

  - name: ordering_provider_county
    csvFields: [{name: Ordering_provider_county}]


  # Fields that are calculated

  - name: reporting_facility_name
    mapper: use(testing_lab_name)

  - name: reporting_facility_clia
    mapper: use(testing_lab_clia)

  # These fields are calculated, but not outputted, for filtering purposes
  - name: test_authorized_for_otc
  - name: test_authorized_for_home
  - name: test_authorized_for_unproctored
  - name: abnormal_flag
