/*
 * This file is generated by jOOQ.
 */
package gov.cdc.prime.router.azure.db.tables;


import gov.cdc.prime.router.azure.db.Public;
import gov.cdc.prime.router.azure.db.tables.records.ReportAncestorsRecord;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReportAncestors extends TableImpl<ReportAncestorsRecord> {

    private static final long serialVersionUID = -1007681707;

    /**
     * The reference instance of <code>public.report_ancestors</code>
     */
    public static final ReportAncestors REPORT_ANCESTORS = new ReportAncestors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReportAncestorsRecord> getRecordType() {
        return ReportAncestorsRecord.class;
    }

    /**
     * The column <code>public.report_ancestors.report_ancestors</code>.
     */
    public final TableField<ReportAncestorsRecord, UUID> REPORT_ANCESTORS_ = createField(DSL.name("report_ancestors"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * Create a <code>public.report_ancestors</code> table reference
     */
    public ReportAncestors() {
        this(DSL.name("report_ancestors"), null);
    }

    /**
     * Create an aliased <code>public.report_ancestors</code> table reference
     */
    public ReportAncestors(String alias) {
        this(DSL.name(alias), REPORT_ANCESTORS);
    }

    /**
     * Create an aliased <code>public.report_ancestors</code> table reference
     */
    public ReportAncestors(Name alias) {
        this(alias, REPORT_ANCESTORS);
    }

    private ReportAncestors(Name alias, Table<ReportAncestorsRecord> aliased) {
        this(alias, aliased, new Field[1]);
    }

    private ReportAncestors(Name alias, Table<ReportAncestorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    public <O extends Record> ReportAncestors(Table<O> child, ForeignKey<O, ReportAncestorsRecord> key) {
        super(child, key, REPORT_ANCESTORS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ReportAncestors as(String alias) {
        return new ReportAncestors(DSL.name(alias), this, parameters);
    }

    @Override
    public ReportAncestors as(Name alias) {
        return new ReportAncestors(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportAncestors rename(String name) {
        return new ReportAncestors(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportAncestors rename(Name name) {
        return new ReportAncestors(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<UUID> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public ReportAncestors call(UUID startReportId) {
        return new ReportAncestors(DSL.name(getName()), null, new Field[] { 
              DSL.val(startReportId, org.jooq.impl.SQLDataType.UUID)
        });
    }

    /**
     * Call this table-valued function
     */
    public ReportAncestors call(Field<UUID> startReportId) {
        return new ReportAncestors(DSL.name(getName()), null, new Field[] { 
              startReportId
        });
    }
}
