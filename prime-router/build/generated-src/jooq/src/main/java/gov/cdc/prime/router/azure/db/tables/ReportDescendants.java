/*
 * This file is generated by jOOQ.
 */
package gov.cdc.prime.router.azure.db.tables;


import gov.cdc.prime.router.azure.db.Public;
import gov.cdc.prime.router.azure.db.tables.records.ReportDescendantsRecord;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReportDescendants extends TableImpl<ReportDescendantsRecord> {

    private static final long serialVersionUID = -1213877483;

    /**
     * The reference instance of <code>public.report_descendants</code>
     */
    public static final ReportDescendants REPORT_DESCENDANTS = new ReportDescendants();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReportDescendantsRecord> getRecordType() {
        return ReportDescendantsRecord.class;
    }

    /**
     * The column <code>public.report_descendants.report_descendants</code>.
     */
    public final TableField<ReportDescendantsRecord, UUID> REPORT_DESCENDANTS_ = createField(DSL.name("report_descendants"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * Create a <code>public.report_descendants</code> table reference
     */
    public ReportDescendants() {
        this(DSL.name("report_descendants"), null);
    }

    /**
     * Create an aliased <code>public.report_descendants</code> table reference
     */
    public ReportDescendants(String alias) {
        this(DSL.name(alias), REPORT_DESCENDANTS);
    }

    /**
     * Create an aliased <code>public.report_descendants</code> table reference
     */
    public ReportDescendants(Name alias) {
        this(alias, REPORT_DESCENDANTS);
    }

    private ReportDescendants(Name alias, Table<ReportDescendantsRecord> aliased) {
        this(alias, aliased, new Field[1]);
    }

    private ReportDescendants(Name alias, Table<ReportDescendantsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    public <O extends Record> ReportDescendants(Table<O> child, ForeignKey<O, ReportDescendantsRecord> key) {
        super(child, key, REPORT_DESCENDANTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ReportDescendants as(String alias) {
        return new ReportDescendants(DSL.name(alias), this, parameters);
    }

    @Override
    public ReportDescendants as(Name alias) {
        return new ReportDescendants(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportDescendants rename(String name) {
        return new ReportDescendants(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportDescendants rename(Name name) {
        return new ReportDescendants(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<UUID> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public ReportDescendants call(UUID startReportId) {
        return new ReportDescendants(DSL.name(getName()), null, new Field[] { 
              DSL.val(startReportId, org.jooq.impl.SQLDataType.UUID)
        });
    }

    /**
     * Call this table-valued function
     */
    public ReportDescendants call(Field<UUID> startReportId) {
        return new ReportDescendants(DSL.name(getName()), null, new Field[] { 
              startReportId
        });
    }
}
